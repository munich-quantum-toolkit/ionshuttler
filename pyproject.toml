[build-system]
requires = ["uv_build>=0.8.17,<0.9.0"]
build-backend = "uv_build"

[project]
name = "mqt-ionshuttler"
version = "0.1.3"
authors = [
    { name = "Daniel Schoenberger", email = "daniel.schoenberger@tum.de"}
]
description = "A solver for the shuttling problem in QCCD quantum computers"
keywords = ["MQT", "quantum computing", "compilation", "shuttling", "design automation", "sat solver"]
readme = "README.md"
license = "MIT"
license-files = ["LICENSE.md"]
classifiers = [
    "Programming Language :: Python",
    "Programming Language :: Python :: 3 :: Only",
]
dependencies = [
    "z3-solver==4.12.1.0",
    "matplotlib==3.7.1",
    "networkx==3.0",
    "qiskit==1.0.0",
    "more_itertools==10.1.0"
]
requires-python = ">=3.10"

[project.urls]
Discussions = "https://github.com/munich-quantum-toolkit/ionshuttler/discussions"
Documentation = "https://mqt.readthedocs.io/projects/ionshuttler"
Homepage = "https://github.com/munich-quantum-toolkit/ionshuttler"
Issues = "https://github.com/munich-quantum-toolkit/ionshuttler/issues"


[tool.uv]
required-version = ">=0.8.17"

[tool.uv.build-backend]
module-name = "mqt.ionshuttler"
source-include = [
  "algorithms_exact/**",
  "algorithms_heuristic/**",
  "QASM_files/**",
]

[tool.uv.sources]
mqt-ionshuttler = { workspace = true }


[tool.mypy]
files = ["src/mqt"]
mypy_path = ["$MYPY_CONFIG_FILE_DIR/src"]
python_version = "3.10"
warn_unused_configs = true
enable_error_code = ["ignore-without-code", "redundant-expr", "truthy-bool"]
strict = true
disallow_untyped_defs = false
explicit_package_bases = true
warn_unreachable = true

[[tool.mypy.overrides]]
module = ["qiskit.*"]
ignore_missing_imports = true


[tool.typos]
default.extend-ignore-re = [
    "(?Rm)^.*(#|//)\\s*spellchecker:disable-line$", # ignore line
    "(?s)(#|//)\\s*spellchecker:off.*?\\n\\s*(#|//)\\s*spellchecker:on" # ignore block
]

[tool.typos.default.extend-words]
wille = "wille"
aer = "aer"
ket   = "ket"


[tool.repo-review]
ignore = ["GH200"]


[tool.ruff]
line-length = 120
preview = true
unsafe-fixes = true

[tool.ruff.lint]
select = [
    "E", "F", "W",  # flake8
    "A",            # flake8-builtins
    "ARG",          # flake8-unused-arguments
    "B", "B904",    # flake8-bugbear
    "C4",           # flake8-comprehensions
    "EM",           # flake8-errmsg
    "EXE",          # flake8-executable
    "I",            # isort
    "ICN",          # flake8-import-conventions
    "ISC",          # flake8-implicit-str-concat
    "N",            # flake8-naming
    "PGH",          # pygrep-hooks
    "PIE",          # flake8-pie
    "PL",           # pylint
    "PT",           # flake8-pytest-style
    "PTH",          # flake8-use-pathlib
    "PYI",          # flake8-pyi
    "Q",            # flake8-quotes
    "RET",          # flake8-return
    "RSE",          # flake8-raise
    "RUF",          # Ruff-specific
    "SIM",          # flake8-simplify
    "TCH",          # flake8-type-checking
    "TID",          # flake8-tidy-imports
    "TRY",          # tryceratops
    "UP",           # pyupgrade
    "YTT"           # flake8-2020
]
ignore = [
    "E501",     # Line too long (Black is enough)
    "PLR2004",  # Magic values
    "PLR0913",  # Too many arguments
    "PLR0912",  # Too many branches
    "SIM105",   # Use `contextlib.suppress(ValueError)` instead of try-except-pass
]
future-annotations = true

[tool.ruff.lint.isort]
known-first-party = ["mqt.yaqs"]

[tool.ruff.lint.per-file-ignores]
"docs/**" = ["T20", "INP001"]

[tool.ruff.lint.pydocstyle]
convention = "google"


[tool.check-sdist]
git-only = [
    ".gitignore",
    ".license-tools-config.json",
    "docs/*",
    "uv.lock",
]
